# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2020-12-28") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/10/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/10/02:2020/12/28[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_28Dec2020_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
Sys.setenv(R_MAX_VSIZE = 8e9)
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-01-04") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/10/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/10/02:2021/01/04[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_04Jan2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
#system("rm pubmed_*")
#system("rm mx_reduced*")
Sys.setenv(R_MAX_VSIZE = 8e9)
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-01-18") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/10/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/10/02:2021/01/18[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_18Jan2021_full.csv")  ### UPDATE ###
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
### PACKAGES -------------------------------------------------------------------------------------
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(DT)) install.packages("DT", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(timevis)) install.packages("timevis", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
if(!require(writexl)) install.packages("writexl", repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if(!require(cowplot)) install.packages("cowplot", repos = "http://cran.us.r-project.org")
if(!require(BiocManager)) install.packages("BiocManager", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
options(repos = BiocManager::repositories())
if(!require(ComplexHeatmap)) install.packages("ComplexHeatmap", repos = "https://bioconductor.org")
if(!require(scales)) install.packages("scales", repos = "https://bioconductor.org")
### LANDSCAPE INPUTS -------------------------------------------------------------------------------------
# load landscape input data
landscape = read.csv("VaC_LSHTM_landscape.csv", stringsAsFactors = FALSE)
trials = read.csv("VaC_LSHTM_trials.csv",  stringsAsFactors = FALSE)
# combine other/unknown platforms
landscape$Platform[landscape$Platform=="Other" | landscape$Platform=="Unknown"] = "Other/Unknown"
trials$Platform[trials$Platform=="Other" | trials$Platform=="Unknown"] = "Other/Unknown"
# create timeline input dataframe
timeline_preclinical = data.frame(group = landscape$Institutes %>% str_replace_all(., "/", "<br>"),
subgroup = landscape$Platform,
content = paste0("<b>",landscape$Name,"</b><br>Pre-clinical development"),
start = landscape$Date.started,
end = NA,
country = landscape$Country,
stage = landscape$Phase,
use = landscape$In.use)
timeline_clinical = data.frame(group = trials$Institutes %>% str_replace_all(., "/", "<br>"),
subgroup = trials$Platform,
content = paste0("<b>",trials$Name,"</b><br>",trials$Phase,", ",trials$Location, " <i>(", trials$Status,")</i><br>",
'<a href="',trials$Link,'" target="_blank">',trials$Trial.number,"</a>"),
start = trials$Start.date,
end = trials$Primary.completion.date)
timeline_clinical$group = as.character(timeline_clinical$group)
timeline_clinical = merge(timeline_clinical, timeline_preclinical[,c("group", "country", "stage", "use")], by = "group")
timeline = data.frame(rbind(timeline_preclinical, timeline_clinical))
# add separate timeline inputs for phase III WIBP/BIBP
timeline = timeline %>%
add_row(group = "Wuhan Institute of Biological Products<br>Sinopharm", subgroup = "Inactivated",
content = '<b>WIBP/BIBP vaccines</b><br>Phase III, UAE, Bahrain, Jordan, Egypt <i>(Recruiting)</i><br><a href="https://clinicaltrials.gov/ct2/show/NCT04510207" target="_blank">NCT04510207</a>',
start = '16/07/2020', end = '16/03/2021', country = 'China', stage = "Phase III", use="Yes") %>%
add_row(group = "Wuhan Institute of Biological Products<br>Sinopharm", subgroup = "Inactivated",
content = '<b>WIBP/BIBP vaccines</b><br>Phase III, Peru <i>(Recruiting)</i><br><a href="https://clinicaltrials.gov/ct2/show/NCT04612972" target="_blank">NCT04612972</a>',
start = '10/09/2020', end = '31/12/2020', country = 'China', stage = "Phase III", use="Yes") %>%
# add separate timeline inputs for combined Oxford/Gamaleya trials
add_row(group = "Gamaleya Research Institute", subgroup = "Non-replicating viral vector",
content = '<b>Oxford/Gamaleya vaccines</b><br>Phase I/II, Pending <i>(Not yet recruiting)</i><br><a href="https://clinicaltrials.gov/ct2/show/NCT04684446" target="_blank">NCT04684446</a>',
start = '16/03/2021', end = '16/11/2021', country = 'Russia', stage = "Phase III", use="Yes") %>%
add_row(group = "Gamaleya Research Institute", subgroup = "Non-replicating viral vector",
content = '<b>Oxford/Gamaleya vaccines</b><br>Phase II, Azerbaijan <i>(Not yet recruiting)</i><br><a href="https://clinicaltrials.gov/ct2/show/NCT04686773" target="_blank">NCT04686773</a>',
start = '10/02/2021', end = '09/04/2021', country = 'Russia', stage = "Phase III", use="Yes") %>%
# add rows for licensure
# add_row(group = "Beijing Institute of Biological Products<br>Sinopharm", subgroup = "Inactivated",
#         content = '<b>BBIBP-CorV</b><br>Full approval, UAE<br><a href="https://www.nature.com/articles/d41586-020-03563-z" target="_blank">09 Dec 2020</a>',
#         start = '09/12/2020', country = 'China', stage = "Licensed", use="Yes")  %>%
# add_row(group = "BioNTech<br>Pfizer", subgroup = "RNA",
#         content = '<b>BNT162 (b2)</b><br>Emergency approval, UK<br><a href="https://www.pfizer.co.uk/mhra-grants-temporary-authorisation-for-Pfizer-BioNTech-COVID-19-mRNA-vaccine" target="_blank">02 Dec 2020</a>',
#         start = '02/12/2020', country = 'Germany/USA', stage = "Licensed", use="Yes")  %>%
# add_row(group = "University of Oxford<br>AstraZeneca", subgroup = "Non-replicating viral vector",
#         content = '<b>ChAdOx1-S</b><br>Approved, UK<br><a href="https://www.gov.uk/government/news/oxford-universityastrazeneca-vaccine-authorised-by-uk-medicines-regulator" target="_blank">30 Dec 2020</a>',
#         start = '30/12/2020', country = 'UK', stage = "Licensed", use="Yes")  %>%
# add_row(group = "Moderna<br>NIAID", subgroup = "RNA",
#         content = '<b>mRNA-1273</b><br>Emergency use authorisation, USA<br><a href="https://www.fda.gov/emergency-preparedness-and-response/coronavirus-disease-2019-covid-19/moderna-covid-19-vaccine" target="_blank">18 Dec 2020</a>',
#         start = '18/12/2020', country = 'USA', stage = "Licensed", use="Yes")  %>%
# add row for terminated candidates
add_row(group = "University of Queensland<br>CSL<br>Seqirus", subgroup = "Protein subunit",
content = '<b>Molecular clamp vaccine</b><br>Programme halted<br><a href="https://www.csl.com/news/2020/20201211-update-on-the-university-of-queensland-covid-19-vaccine" target="_blank">11 Dec 2020</a>',
start = '11/12/2020', country = 'Australia/UK/USA', stage = "Terminated", use = "No")
# Create factor levels
timeline$subgroup = factor(timeline$subgroup, levels=c("RNA", "DNA", "Non-replicating viral vector", "Replicating viral vector", "Inactivated", "Live-attenuated",
"Protein subunit", "Virus-like particle", "Other/Unknown"))
timeline$start = format(as.Date(timeline$start, format="%d/%m/%Y"),"%Y-%m-%d")
timeline$end = format(as.Date(timeline$end, format="%d/%m/%Y"),"%Y-%m-%d")
timeline = timeline %>% arrange(subgroup, group)
# create group and subgroup dataframes
groups_df = data.frame(id = unique(timeline$group), content = unique(timeline$group))
subgroups_df = data.frame(id = unique(timeline$subgroup), content = unique(timeline$subgroup))
# set palettes
pal_1 = brewer.pal(9, "Blues")[c(3:6,9)]
pal_2 = brewer.pal(9, "Blues")[c(6:9,3)]
pal_3 = brewer.pal(9, "Oranges")[c(3:6,9)]
pal_4 = brewer.pal(9, "Oranges")[c(6:9,3)]
pal_5 = brewer.pal(9, "Greens")[c(3:6,9)]
pal_6 = brewer.pal(9, "Greens")[c(6:9,3)]
pal_7 = brewer.pal(9, "Purples")[c(3:6,9)]
pal_8 = brewer.pal(9, "Purples")[c(6:9,3)]
pal_9 = brewer.pal(9, "Greys")[c(3:6,9)]
# add style for preclinical
timeline$style = NA
timeline$style[timeline$subgroup=="RNA"] = paste0("font-size:12px;border-color:",pal_1[5],";background-color:",pal_1[1],";color:",pal_1[5],";")
timeline$style[timeline$subgroup=="DNA"] = paste0("font-size:12px;border-color:",pal_2[5],";background-color:",pal_2[1],";color:",pal_2[5],";")
timeline$style[timeline$subgroup=="Non-replicating viral vector"] = paste0("font-size:12px;border-color:",pal_3[5],";background-color:",pal_3[1],";color:",pal_3[5],";")
timeline$style[timeline$subgroup=="Replicating viral vector"] = paste0("font-size:12px;border-color:",pal_4[5],";background-color:",pal_4[1],";color:",pal_4[5],";")
timeline$style[timeline$subgroup=="Inactivated"] = paste0("font-size:12px;border-color:",pal_5[5],";background-color:",pal_5[1],";color:",pal_5[5],";")
timeline$style[timeline$subgroup=="Live-attenuated"] = paste0("font-size:12px;border-color:",pal_6[5],";background-color:",pal_6[1],";color:",pal_6[5],";")
timeline$style[timeline$subgroup=="Protein subunit"] = paste0("font-size:12px;border-color:",pal_7[5],";background-color:",pal_7[1],";color:",pal_7[5],";")
timeline$style[timeline$subgroup=="Virus-like particle"] = paste0("font-size:12px;border-color:",pal_8[5],";background-color:",pal_8[1],";color:",pal_8[5],";")
timeline$style[timeline$subgroup=="Other/Unknown"] = paste0("font-size:12px;border-color:",pal_9[5],";background-color:",pal_9[1],";color:",pal_9[5],";")
# add style for phase I
timeline$style[timeline$subgroup=="RNA" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_1[5],";background-color:",pal_1[2],";color:",pal_1[5],";")
timeline$style[timeline$subgroup=="DNA" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_2[5],";background-color:",pal_2[2],";color:",pal_2[5],";")
timeline$style[timeline$subgroup=="Non-replicating viral vector" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_3[5],";background-color:",pal_3[2],";color:",pal_3[5],";")
timeline$style[timeline$subgroup=="Replicating viral vector" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_4[5],";background-color:",pal_4[2],";color:",pal_4[5],";")
timeline$style[timeline$subgroup=="Inactivated" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_5[5],";background-color:",pal_5[2],";color:",pal_5[5],";")
timeline$style[timeline$subgroup=="Live-attenuated" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_6[5],";background-color:",pal_6[2],";color:",pal_6[5],";")
timeline$style[timeline$subgroup=="Protein subunit" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_7[5],";background-color:",pal_7[2],";color:",pal_7[5],";")
timeline$style[timeline$subgroup=="Virus-like particle" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_8[5],";background-color:",pal_8[2],";color:",pal_8[5],";")
timeline$style[timeline$subgroup=="Other/Unknown" & grepl("Phase I", timeline$content)] = paste0("font-size:12px;border-color:",pal_9[5],";background-color:",pal_9[2],";color:",pal_9[5],";")
# add style for phase II
timeline$style[timeline$subgroup=="RNA" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_1[5],";background-color:",pal_1[3],";color:",pal_1[5],";")
timeline$style[timeline$subgroup=="DNA" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_2[5],";background-color:",pal_2[3],";color:",pal_2[5],";")
timeline$style[timeline$subgroup=="Non-replicating viral vector" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_3[5],";background-color:",pal_3[3],";color:",pal_3[5],";")
timeline$style[timeline$subgroup=="Replicating viral vector" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_4[5],";background-color:",pal_4[3],";color:",pal_4[5],";")
timeline$style[timeline$subgroup=="Inactivated" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_5[5],";background-color:",pal_5[3],";color:",pal_5[5],";")
timeline$style[timeline$subgroup=="Live-attenuated" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_6[5],";background-color:",pal_6[3],";color:",pal_6[5],";")
timeline$style[timeline$subgroup=="Protein subunit" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_7[5],";background-color:",pal_7[3],";color:",pal_7[5],";")
timeline$style[timeline$subgroup=="Virus-like particle" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_8[5],";background-color:",pal_8[3],";color:",pal_8[5],";")
timeline$style[timeline$subgroup=="Other/Unknown" & grepl("II", timeline$content)] = paste0("font-size:12px;border-color:",pal_9[5],";background-color:",pal_9[3],";color:",pal_9[5],";")
# add style for phase III
timeline$style[timeline$subgroup=="RNA" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_1[5],";background-color:",pal_1[4],";color:",pal_1[5],";")
timeline$style[timeline$subgroup=="DNA" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_2[5],";background-color:",pal_2[4],";color:",pal_2[5],";")
timeline$style[timeline$subgroup=="Non-replicating viral vector" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_3[5],";background-color:",pal_3[4],";color:",pal_3[5],";")
timeline$style[timeline$subgroup=="Replicating viral vector" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_4[5],";background-color:",pal_4[4],";color:",pal_4[5],";")
timeline$style[timeline$subgroup=="Inactivated" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_5[5],";background-color:",pal_5[4],";color:",pal_5[5],";")
timeline$style[timeline$subgroup=="Live-attenuated" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_6[5],";background-color:",pal_6[4],";color:",pal_6[5],";")
timeline$style[timeline$subgroup=="Protein subunit" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_7[5],";background-color:",pal_7[4],";color:",pal_7[5],";")
timeline$style[timeline$subgroup=="Virus-like particle" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_8[5],";background-color:",pal_8[4],";color:",pal_8[5],";")
timeline$style[timeline$subgroup=="Other/Unknown" & grepl("III", timeline$content)] = paste0("font-size:12px;border-color:",pal_9[5],";background-color:",pal_9[4],";color:",pal_9[5],";")
# add style for licensed
timeline$style[timeline$subgroup=="RNA" & (grepl("pprov", timeline$content) | grepl("authorisation", timeline$content))] = paste0("font-size:12px;border-color:",pal_1[1],";background-color:",pal_1[5],";color:",pal_1[1],";")
timeline$style[timeline$subgroup=="Non-replicating viral vector" & (grepl("pprov", timeline$content) | grepl("authorisation", timeline$content))] = paste0("font-size:12px;border-color:",pal_3[1],";background-color:",pal_3[5],";color:",pal_3[1],";")
timeline$style[timeline$subgroup=="Inactivated" & (grepl("pprov", timeline$content) | grepl("authorisation", timeline$content))] = paste0("font-size:12px;border-color:",pal_5[1],";background-color:",pal_5[5],";color:",pal_5[1],";")
# add style for terminated
timeline$style[grepl("Programme halted", timeline$content)] = paste0("font-size:12px;border-color:",pal_9[5],";background-color:",pal_9[1],";color:",pal_9[5],";")
# summary
landscape$Phase[landscape$Phase=="Phase II/III"] = "Phase III"
ntypes = length(levels(timeline$subgroup))
summary = data.frame(Group = rep(levels(timeline$subgroup),6),
Phase = c(rep("Pre-clinical",ntypes),rep("Phase I",ntypes),rep("Phase I/II",ntypes),rep("Phase II",ntypes),rep("Phase III",ntypes),rep("In use",ntypes)),
N = 0)
summary$Stage = "Testing"
summary$Stage[summary$Phase=="In use"] = "Use"
summary$Stage = factor(summary$Stage, levels = c("Testing", "Use"))
for (i in 1:nrow(summary)) { summary$N[i] = nrow(subset(landscape, Platform==as.character(summary$Group[i]) & Phase==as.character(summary$Phase[i]))) }
for (i in 1:ntypes) { summary$N[summary$Phase=="In use"][i] = nrow(subset(landscape, Platform==as.character(summary$Group[i]) & In.use=="Yes")) }
summary$N[summary$N==0] = NA
# set levels
summary$Group = factor(summary$Group, levels=rev(c("RNA", "DNA", "Non-replicating viral vector", "Replicating viral vector", "Inactivated", "Live-attenuated",
"Protein subunit", "Virus-like particle", "Other/Unknown")))
summary$Phase = factor(summary$Phase, levels=c("Pre-clinical", "Phase I", "Phase I/II", "Phase II", "Phase III", "In use"))
# summary plot
summary_plot = ggplot(summary, aes(x=Phase, y=Group, colour=Group, label=N)) + geom_point(alpha = 0.8, aes(size=N)) + theme_bw() +
scale_colour_manual(values = c("RNA" = pal_1[1], "DNA" = pal_2[1],
"Non-replicating viral vector" = pal_3[1], "Replicating viral vector" = pal_4[1],
"Inactivated" = pal_5[1], "Live-attenuated" = pal_6[1],
"Protein subunit" = pal_7[1], "Virus-like particle" = pal_8[1],
"Other/Unknown" = pal_9[1])) +
xlab("") + ylab("") + theme(legend.position = "", text = element_text(size=15)) +
scale_size(range = c(1, 12)) + geom_text(color="black", size=5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_grid(.~Stage,  scales = "free", space='free') + theme(strip.background = element_blank())
# manual components for ui
table(landscape$Phase)
table(landscape$Platform)
table(landscape$In.use)
update_full = "18 January 2021"
total_count = nrow(landscape)
clinical_count = sum(landscape$Phase!="Pre-clinical")
living_review_study_count = nrow(fread("living_review/VaC_eligible_studies.csv"))
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-01-25") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/01/25[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_25Jan2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-02-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_01Feb2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
